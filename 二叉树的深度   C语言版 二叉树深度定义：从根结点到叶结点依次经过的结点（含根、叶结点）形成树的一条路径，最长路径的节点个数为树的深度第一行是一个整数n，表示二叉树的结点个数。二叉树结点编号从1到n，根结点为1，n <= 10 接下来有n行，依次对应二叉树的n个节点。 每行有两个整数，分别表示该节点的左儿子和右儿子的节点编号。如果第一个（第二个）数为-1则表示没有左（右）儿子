#include<stdio.h>
#include<stdlib.h>
typedef struct BTNode
{
	int data;
	int rchild;
	int lchild;
}BTNode;
int max(int a,int b)
{
	return a>b ? a:b; 
}
int TreeDepth(BTNode *pTree,int m)
{
	if(pTree==NULL)
	  return 0;
	if(m==-1)
	  return 0;
	else
	  return max(TreeDepth(pTree,pTree[m].lchild),TreeDepth(pTree,pTree[m].rchild))+1;
}
int main()
{
	int n;
	while(scanf("%d",&n)!=EOF)
 {
   BTNode *pTree=NULL;
   if(n>0)
	{
			pTree=(BTNode*)malloc(n*sizeof(BTNode)); 
			if(pTree==NULL)
			{
				exit(EXIT_FAILURE);
			}
	        int i;
	     for(i=0;i<n;i++)
	  {
		int data1,data2;
		scanf("%d %d",&data1,&data2);
		if(data1!=-1)
		   pTree[i].lchild=data1-1;
		else
		   pTree[i].lchild=-1;
	 	if(data2!=-1)
	 	   pTree[i].rchild=data2-1;
	 	else
	 	   pTree[i].rchild=-1;
      }
	
	}
	printf("%d",TreeDepth(pTree,0));
	//printf("%d",pTree[0].lchild);
	}
	
	return 0;
}

用数组解决
#include<iostream>
using namespace std;
int a[11][2];

int deep(int n)
{ 
    
	if(a[n][0]==-1&&a[n][1]==-1)
	  {	  return 1;}
	  int left;
      int right;
      left=0;
      right=0;
	  
	
	if(a[n][0]!=-1)
		  left=deep(a[n][0]);
	if(a[n][1]!=-1)
		  right=deep(a[n][1]);
	
	return 1+max(left,right);
}
int main()
{
	int n,i;
	while(cin>>n)
	{
		for(i=1;i<=n;i++)
		{
			cin>>a[i][0]>>a[i][1];
		}
		cout<<deep(1);
	}
return 0;
}
